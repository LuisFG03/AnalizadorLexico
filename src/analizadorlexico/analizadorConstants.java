/* Generated By:JavaCC: Do not edit this line. analizadorConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface analizadorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CHOMP = 5;
  /** RegularExpression Id. */
  int PRINT = 6;
  /** RegularExpression Id. */
  int PUTS = 7;
  /** RegularExpression Id. */
  int IF = 8;
  /** RegularExpression Id. */
  int ELSE = 9;
  /** RegularExpression Id. */
  int ELSIF = 10;
  /** RegularExpression Id. */
  int WHILE = 11;
  /** RegularExpression Id. */
  int FOR = 12;
  /** RegularExpression Id. */
  int DO = 13;
  /** RegularExpression Id. */
  int TRUE = 14;
  /** RegularExpression Id. */
  int FALSE = 15;
  /** RegularExpression Id. */
  int RETURN = 16;
  /** RegularExpression Id. */
  int GETS = 17;
  /** RegularExpression Id. */
  int NEXT = 18;
  /** RegularExpression Id. */
  int CASE = 19;
  /** RegularExpression Id. */
  int BREAK = 20;
  /** RegularExpression Id. */
  int END = 21;
  /** RegularExpression Id. */
  int SUMA = 22;
  /** RegularExpression Id. */
  int RESTA = 23;
  /** RegularExpression Id. */
  int MULTI = 24;
  /** RegularExpression Id. */
  int DIV = 25;
  /** RegularExpression Id. */
  int IGUAL_QUE = 26;
  /** RegularExpression Id. */
  int DIFERENTE_QUE = 27;
  /** RegularExpression Id. */
  int MAYOR_QUE = 28;
  /** RegularExpression Id. */
  int MENOR_QUE = 29;
  /** RegularExpression Id. */
  int MAYOR_IGUAL_QUE = 30;
  /** RegularExpression Id. */
  int MENOR_IGUAL_QUE = 31;
  /** RegularExpression Id. */
  int AND = 32;
  /** RegularExpression Id. */
  int OR = 33;
  /** RegularExpression Id. */
  int ASIGNA = 34;
  /** RegularExpression Id. */
  int COMENTARIO = 35;
  /** RegularExpression Id. */
  int PUNTOCOMA = 36;
  /** RegularExpression Id. */
  int LLAVE_IZQ = 37;
  /** RegularExpression Id. */
  int LLAVE_DER = 38;
  /** RegularExpression Id. */
  int PAREN_IZQ = 39;
  /** RegularExpression Id. */
  int PAREN_DER = 40;
  /** RegularExpression Id. */
  int CORCH_IZQ = 41;
  /** RegularExpression Id. */
  int CORCH_DER = 42;
  /** RegularExpression Id. */
  int COMA = 43;
  /** RegularExpression Id. */
  int PUNTO = 44;
  /** RegularExpression Id. */
  int NOMBRE_VAR = 45;
  /** RegularExpression Id. */
  int NUMERO = 46;
  /** RegularExpression Id. */
  int CADENA = 47;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"chomp\"",
    "\"print\"",
    "\"puts\"",
    "\"if\"",
    "\"else\"",
    "\"elsif\"",
    "\"while\"",
    "\"for\"",
    "\"do\"",
    "\"true\"",
    "\"false\"",
    "\"return\"",
    "\"gets\"",
    "\"next\"",
    "\"case\"",
    "\"break\"",
    "\"end\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"&&\"",
    "\"||\"",
    "\"=\"",
    "<COMENTARIO>",
    "\";\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\".\"",
    "<NOMBRE_VAR>",
    "<NUMERO>",
    "<CADENA>",
  };

}
